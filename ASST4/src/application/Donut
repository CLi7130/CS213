package application;

import application.Enums.DONUT_TYPES;

import java.text.DecimalFormat;

import ruCafe.Enums.CAKE_DONUTS;
import ruCafe.Enums.COFFEE_SIZE;
import ruCafe.Enums.YEAST_DONUTS;
import ruCafe.Enums.DONUT_HOLES;

public class Donut extends MenuItem implements Customizable {
    private DONUT_TYPES type;

    final static private double CAKE = 1.59;
    final static private double HOLES = 0.33;
    final static private double YEAST = 1.39;
    final static private double [] typeCost = {CAKE, HOLES, YEAST};
    private String flavor;

    private Donut donut;
    
    
    /**
     * @return the type
     */
    public DONUT_TYPES getType() {
        return type;
    }

    /**
     * @param type the type to set
     */
    public void setType(DONUT_TYPES type) {
        this.type = type;
    }

    
    @Override
    public boolean add(Object obj) {
        if (obj instanceof Donut) {
            donut = (Donut) obj;
            return true;
        }
        return false;
    }

    /**
     * @return the flavor
     */
    public String getFlavor() {
        return flavor;
    }

    /**
     * @param flavor the flavor to set
     */
    public void setFlavor(String flavor) {
        this.flavor = flavor;
    }

    @Override
    public boolean remove(Object obj) {
        if (obj instanceof Donut) {
            donut = null;
            return true;
        }
        return false;
    }
    
    public double itemPrice(){
        DONUT_TYPES donutType = donut.type;
        double total = 0;
        total += typeCost[donutType.ordinal()];
        return total;
    }
    
    public String print() {
        DecimalFormat money = new DecimalFormat("#,##0.00");
        String qualities;
        if(donut == null) {
            return "";
        }
        qualities = "Donut: " + donut.type + " " + donut.getFlavor() + " Quantity: " + super.getQuantity() + " Price: " + money.format(super.itemPrice());
        return qualities;
    }
}
